;;;;;;;;;;;;;;;;;;;;;
; FPM Configuration ;
;;;;;;;;;;;;;;;;;;;;;

; All relative paths in this configuration file are relative to PHP's install
; prefix (/usr). This prefix can be dynamically changed by using the
; '-p' argument from the command line.

;;;;;;;;;;;;;;;;;;
; Global Options ;
;;;;;;;;;;;;;;;;;;

[global]
; Pid file
; Note: the default prefix is /var
; Default Value: none
pid = /run/php7.2-fpm.pid

; Error log file
; If it's set to "syslog", log is sent to syslogd instead of being written
; into a local file.
; Note: the default prefix is /var
; Default Value: log/php-fpm.log
error_log = /var/log/php7.2-fpm.log

; syslog_facility is used to specify what type of program is logging the
; message. This lets syslogd specify that messages from different facilities
; will be handled differently.
; See syslog(3) for possible values (ex daemon equiv LOG_DAEMON)
; Default Value: daemon
;syslog.facility = daemon

; syslog_ident is prepended to every message. If you have multiple FPM
; instances running on the same server, you can change the default value
; which must suit common needs.
; Default Value: php-fpm
;syslog.ident = php-fpm

; Log level
; Possible Values: alert, error, warning, notice, debug
; Default Value: notice
;log_level = notice

; If this number of child processes exit with SIGSEGV or SIGBUS within the time
; interval set by emergency_restart_interval then FPM will restart. A value
; of '0' means 'Off'.
; Default Value: 0
;emergency_restart_threshold = 0

; Interval of time used by emergency_restart_interval to determine when
; a graceful restart will be initiated.  This can be useful to work around
; accidental corruptions in an accelerator's shared memory.
; Available Units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
;emergency_restart_interval = 0

; Time limit for child processes to wait for a reaction on signals from master.
; Available units: s(econds), m(inutes), h(ours), or d(ays)
; Default Unit: seconds
; Default Value: 0
;process_control_timeout = 0

; The maximum number of processes FPM will fork. This has been designed to control
; the global number of processes when using dynamic PM within a lot of pools.
; Use it with caution.
; Note: A value of 0 indicates no limit
; Default Value: 0
; process.max = 128

; Specify the nice(2) priority to apply to the master process (only if set)
; The value can vary from -19 (highest priority) to 20 (lowest priority)
; Note: - It will only work if the FPM master process is launched as root
;       - The pool process will inherit the master process priority
;         unless specified otherwise
; Default Value: no set
; process.priority = -19

; Send FPM to background. Set to 'no' to keep FPM in foreground for debugging.
; Default Value: yes
;daemonize = yes

; Set open file descriptor rlimit for the master process.
; Default Value: system defined value
;rlimit_files = 1024

; Set max core size rlimit for the master process.
; Possible Values: 'unlimited' or an integer greater or equal to 0
; Default Value: system defined value
;rlimit_core = 0

; Specify the event mechanism FPM will use. The following is available:
; - select     (any POSIX os)
; - poll       (any POSIX os)
; - epoll      (linux >= 2.5.44)
; - kqueue     (FreeBSD >= 4.1, OpenBSD >= 2.9, NetBSD >= 2.0)
; - /dev/poll  (Solaris >= 7)
; - port       (Solaris >= 10)
; Default Value: not set (auto detection)
;events.mechanism = epoll

; When FPM is built with systemd integration, specify the interval,
; in seconds, between health report notification to systemd.
; Set to 0 to disable.
; Available Units: s(econds), m(inutes), h(ours)
; Default Unit: seconds
; Default value: 10
;systemd_interval = 10

;;;;;;;;;;;;;;;;;;;;
; Pool Definitions ;
;;;;;;;;;;;;;;;;;;;;

[www]
user = www-data
group = www-data

listen = 127.0.0.1:9000
listen.owner = www-data
listen.group = www-data

; List of addresseses (IPv4/IPv6) of FastCGI clients which are allowed to connect.
; Currently only our nginx container in this pod needs to connect.
listen.allowed_clients = 127.0.0.1

; Here's the important configuration. Since we're running php-fpm in a cluster,
; we want to run it static, rather than dynamic.
pm = static

; Fewer children means that each process has more cpu available per pod.
; Note: This should be lowered as we scale up our servers. But since k8s only
; can only scale using CPU, we'll start fairly high.
pm.max_children = 64

; The number of requests each child process should execute before respawning.
pm.max_requests = 500

; Note: Used only when pm is set to 'dynamic'
; Note: Mandatory when pm is set to 'dynamic'
;pm.start_servers = 30
;pm.min_spare_servers = 30
;pm.max_spare_servers = 30

; The URI to view the FPM status page. If this value is not set, no URI will be
; recognized as a status page.
; Note: This can be used as a metric to scale up/down pods.
; (https://engineering.springboardvr.com/running-laravel-in-kubernetes-at-scale/)
pm.status_path = /fpm-status

; Disable any other pool configurations
;include=etc/php-fpm.d/*.conf

; We want to share any environment with the fpm workers,
; or else laravel wont be able to read the environment
clear_env = no

; We want to see the worker output in the main log file
; Default value: no (sends output to /dev/null)
catch_workers_output = yes

;;;;;;;;;;;
; Slowlog ;
;;;;;;;;;;;

; IMPORTANT
; Kubernetes by default disables any process to access kernel level data.
; This means that php-fpm cant use the slow log. So to debug this, you have
; to add "SYS_PTRACE" to the securityContext of the container.
; See (https://kubernetes.io/docs/tasks/configure-pod-container/security-context/)

; The log file for slow requests.
; This is required if request_slowlog_timeout is defined
; Default Value: Not set
slowlog = /var/log/$pool.log.slow

; The time of which a request counts as slow.
; Default Value: 0s (Off)
request_slowlog_timeout = 20s

; Depth of slow log stack trace.
; Default Value: 20
request_slowlog_trace_depth = 20
